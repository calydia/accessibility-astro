---
import fetchApi from '../lib/strapi';
import type { MenuTitleInterface } from '../interfaces/menuTitleInterface';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const menuTitles = await fetchApi<MenuTitleInterface>({
  endpoint: 'menu-title-list',
  wrappedByKey: 'data',
  lang: lang
});
const menuTitleList = menuTitles.attributes.titleList.menuItems;

import { getLangFromUrl, useTranslations } from '../i18n/utils';

const pathArray = (Astro.props.currentUrl !== '/') ? Astro.props.currentUrl.split('/') : null;

const currentSlug = Astro.props.currentSlug;
const currentTitle = Astro.props.currentTitle;
const currentTitleCap = currentTitle.charAt(0).toUpperCase() + currentTitle.slice(1);
---

<nav aria-label={ t('breadcrumb-aria') } class="breadcrumb w-full max-w-4xl mx-auto p-4-px md:px-8-px text-lt-gray dark:text-white">
  <ul class="block list-none m-0 p-0">
    <li class="inline">
      <a href={`/${ lang }`} aria-current={!pathArray ? 'page' : false} class="underline underline-offset-2">
        { t('home-link') }
      </a>
    </li>
    {pathArray && pathArray.map((menuItem: string) => {
      let menuTitle:string = '';

      for (let i in menuTitleList) {
        if (menuTitleList[i].menuPath == menuItem) {
          menuTitle = menuTitleList[i].menuTitle;
          return (
            <li class="inline">
              <span class="mx-2">/</span>
              { menuTitle }
            </li>
          );
        }
      }

      if (menuItem == currentSlug) {
        menuTitle = currentTitleCap;
      } else {
        const menuTitleName = menuItem.replaceAll('-', ' ');
        menuTitle = menuTitleName.charAt(0).toUpperCase() + menuTitleName.slice(1);
      }

      return (
        <li class="inline">
          <span class="mx-2">/</span>
          { menuTitle }
        </li>
      );
    })}
  </ul>
</nav>