---
import type { MainMenuItem } from '../interfaces/menuInterfaces';
import { Icon } from 'astro-icon/components';

import { getLangFromUrl, useTranslations } from '../i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const asPath = '/' + Astro.props.currentUrl;

const fetchUrl = (lang == 'en') ? 'https://accessibility-strapi.ampere.corrupted.pw/api/navigation/render/main-navigation?type=TREE&locale=en' : 'https://accessibility-strapi.ampere.corrupted.pw/api/navigation/render/main-navigation?type=TREE&locale=fi'

const sideMenu = await fetch(fetchUrl);
const menuItems = await sideMenu.json();

const firstPart = '/' + Astro.props.currentUrl.substring(0, Astro.props.currentUrl.indexOf("/"));
const filteredMenu = menuItems.filter((menuItem: MainMenuItem) => menuItem.path === firstPart);
---


<aside class="hidden invisible md:block md:visible md:ml-2">
  {filteredMenu.map((menuItem: MainMenuItem, index: number) => {
    const ariaCurrentPath = (asPath.includes(menuItem.path) && menuItem.path !== '/') ? true : undefined;

    return (
    <Fragment key={`fragment-${index}`}>
        {menuItem.type == 'WRAPPER' &&
          // We know the first level items are only wrappers
          <div>
            <span id="side-menu-label" class="relative bg-white dark:bg-dk-blue-darkest text-lt-gray dark:text-dk-gray text-xl mx-8 px-2 pb-2 block mb-[-3.5rem] mt-8">{menuItem.title}</span>
            <nav id="side-menu-nav" aria-labelledby="side-menu-label" class="sidebar-menu text-lt-gray dark:text-dk-gray pb-1 pt-6 px-2 mt-8 bg-white dark:bg-dk-blue-darkest my-12 border-solid border-l-8 border-t-2 border-b-2 border-r-2 rounded-3xl border-lt-code-border dark:border-dk-code-border">
            {menuItem.items &&
              <ul id={`side-menu-button-${index}`}
                class="ml-2">
                {menuItem.items && menuItem.items.map((subMenuItem: MainMenuItem, subIndex: number) => {
                  const activeClass = (asPath === subMenuItem.path) ? 'active-link': 'non-active-link';
                  const ariaCurrentPage = (asPath === subMenuItem.path) ? 'page' : undefined;
                  const titleModified = subMenuItem.title.replace(/\s+/g, '-').toLowerCase();
                  const expanded = (asPath.includes(subMenuItem.path)) ? true : false;

                  return(
                    <Fragment key={`fragment-sub-${subIndex}`}>
                      {subMenuItem.type == 'WRAPPER'
                      // The second level items will be either wrappers or links
                      ? <li class="relative">
                          <button aria-expanded={`${expanded}`} class="mobile-menu-toggle w-full flex items-center text-lt-gray dark:text-dk-gray">  
                            <span id={`sub-subMenuItem-heading-${subIndex}-${subMenuItem.title.toLowerCase().replaceAll(' ', '-')}`}
                              class={`sub-header flex gap-2 items-center text-lg px-1 py-2 mt-0 font-menu text-lt-gray dark:text-dk-gray ${subMenuItem.iconClass} max-lg:mt-2 max-lg:mb-1.5`}>
                              <Icon name={subMenuItem.iconClass} class="menu-icon" />
                              <span class="text-md first-letter:capitalize flex-grow text-left">{subMenuItem.title}</span>
                            </span>
                            <Icon name="plus-solid" class="h-6 w-6 icon--plus md:h-4 md:w-4" aria-hidden="true" />
                            <Icon name="minus-solid" class="h-6 w-6 icon--minus md:h-4 md:w-4" aria-hidden="true" />
                            <span class="sr-only">{ t('menu-button-next-level') }</span>
                          </button>
                          <ul id={`sub-menu-button-lower-${subIndex}-${titleModified}`} aria-labelledby={`subMenuItem-heading-${subIndex}-${subMenuItem.title.toLowerCase().replaceAll(' ', '-')}`}
                            class="ml-3 lg:ml-8 mb-0">
                            {subMenuItem.items && subMenuItem.items.map((lowerSubMenuItem: MainMenuItem) => {
                                const activeClassLower = (asPath === lowerSubMenuItem.path) ? 'active-link': 'non-active-link';
                                const ariaCurrentPageLower = (asPath === lowerSubMenuItem.path && lowerSubMenuItem.path !== '/') ? 'page' : undefined;
                                // The third level items are only links
                                return(
                                  <li class="my-1.5">
                                    <a href={`/${lang}${lowerSubMenuItem.path}`} aria-current={ariaCurrentPageLower}
                                      class={`text-base p-1 block first-letter:capitalize ${activeClassLower}`}
                                    >
                                      {lowerSubMenuItem.title}
                                    </a>
                                  </li>
                                )
                            })}
                          </ul>
                        </li>
                      : <li class="my-1.5">
                          <a href={`/${lang}${subMenuItem.path}`} aria-current={ariaCurrentPage}
                            class={`text-base p-1 block first-letter:capitalize ${activeClass}`}
                          >
                            {subMenuItem.title}
                          </a>
                        </li>
                      }
                    </Fragment>
                  )
                })}
              </ul>
            }
          </nav>
        </div>
        }
      </Fragment>
    );
  })}
</aside>
